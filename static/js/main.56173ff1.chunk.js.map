{"version":3,"sources":["Context.js","pages/EmptyTab.js","components/SearchBar.js","components/Details.js","pages/DataTab/DataTabServers.js","components/MatchesCounter.js","pages/DataTab/DataTabSurfaces.js","pages/DataTab.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","EmptyTab","className","SearchBar","useState","searchValue","setSearchValue","filterVenues","useContext","useEffect","InputGroup","Prepend","Text","icon","faSearch","FormControl","aria-label","value","onChange","e","target","placeholder","Details","selectedVenue","server","undefined","Card","bg","text","style","width","position","Header","Body","Title","venueName","surfaceName","status","sport","ip4","DataTabServers","filteredVenues","serversList","map","venue","currentVenueServer","rows","uniqueServersList","forEach","isUnique","length","push","uniqueServer","id","createUniqueServersList","key","dns","Table","striped","bordered","hover","MatchesCounter","DataTabSurfaces","handleClick","currentVenue","onClick","DataTab","Container","fluid","Row","Col","xs","Tabs","defaultActiveKey","Tab","eventKey","title","App","sm","Nav","variant","Item","Link","Content","Pane","Boolean","window","location","hostname","match","ReactDOM","render","children","venues","setVenues","setSelectedVenue","setFilteredVenues","fetch","then","response","json","data","Provider","newArray","filter","toLowerCase","includes","index","findIndex","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.56173ff1.chunk.js","sourcesContent":["import React, {useState, useEffect} from \"react\"\r\n\r\nconst Context = React.createContext()\r\n\r\nfunction ContextProvider({children}) {\r\n  const [venues, setVenues] = useState([])\r\n  const [selectedVenue, setSelectedVenue] = useState({})\r\n  const [filteredVenues, setFilteredVenues] = useState([])\r\n\r\n  const url = \"https://2hsjstzo71.execute-api.us-east-1.amazonaws.com/prod/livebarn-interview-project\"\r\n\r\n  useEffect(() => {\r\n    fetch(url)\r\n      .then(response => response.json())\r\n      .then(data => setVenues(data))\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    setSelectedVenue(venues[0])\r\n    setFilteredVenues(venues)\r\n  }, [venues])\r\n\r\n  function handleClick(id) {\r\n    const index = venues.findIndex(venue => venue.id === id)\r\n    setSelectedVenue(venues[index])\r\n  }\r\n\r\n  function filterVenues(searchValue) {\r\n    const newArray = venues.filter(venue => venue.venueName.toLowerCase().includes(searchValue.toLowerCase()))\r\n    setFilteredVenues(newArray)\r\n  }\r\n\r\n  return(\r\n    <Context.Provider value={{venues, selectedVenue, filteredVenues, filterVenues, handleClick}}>\r\n      {children}\r\n    </Context.Provider>\r\n  )\r\n}\r\n\r\nexport {ContextProvider, Context}","import React from \"react\"\r\n\r\nfunction EmptyTab() {\r\n  return(\r\n    <p className=\"text-center\">This is an empty tab.</p>\r\n  )\r\n}\r\n\r\nexport default EmptyTab","import React, {useState, useContext, useEffect} from \"react\"\r\nimport {Context} from \"../Context\"\r\n\r\nimport InputGroup from \"react-bootstrap/InputGroup\"\r\nimport FormControl from \"react-bootstrap/FormControl\"\r\n\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faSearch} from \"@fortawesome/free-solid-svg-icons\"\r\n\r\nfunction SearchBar() {\r\n  const [searchValue, setSearchValue] = useState(\"\")\r\n  const {filterVenues} = useContext(Context)\r\n\r\n  function handleChange(e) {\r\n    setSearchValue(e.target.value)\r\n  }\r\n  \r\n  useEffect(() => {\r\n    filterVenues(searchValue)\r\n    // eslint-disable-next-line\r\n  }, [searchValue])\r\n\r\n  return(\r\n    <div>\r\n      <InputGroup className=\"mb-3\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>\r\n            <FontAwesomeIcon icon={faSearch} />\r\n          </InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <FormControl aria-label=\"Search\" value={searchValue} onChange={handleChange} placeholder=\"Search\" />\r\n      </InputGroup>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchBar","import React, {useContext} from \"react\"\r\nimport {Context} from \"../Context\"\r\n\r\nimport Card from \"react-bootstrap/Card\"\r\n\r\nfunction Details() {\r\n  const {selectedVenue} = useContext(Context)\r\n  const {server} = selectedVenue !== undefined && selectedVenue\r\n\r\n  return(\r\n    <Card bg=\"info\" text=\"white\" style={{ width: '18rem', position: \"fixed\" }}>\r\n      <Card.Header className=\"text-center\">Details</Card.Header>\r\n      \r\n      {selectedVenue === undefined ? \r\n        <Card.Body>\r\n          <Card.Text>Loading data...</Card.Text>\r\n        </Card.Body> :\r\n        <Card.Body>\r\n          <Card.Title>Venue Name:</Card.Title>\r\n          <Card.Text>\r\n            {selectedVenue.venueName}\r\n          </Card.Text>\r\n          <Card.Title>Surface Name</Card.Title>\r\n          <Card.Text>\r\n            {selectedVenue.surfaceName}\r\n          </Card.Text>\r\n          <Card.Title>Status:</Card.Title>\r\n          <Card.Text>\r\n            {selectedVenue.status}\r\n          </Card.Text>\r\n          <Card.Title>Sport:</Card.Title>\r\n          <Card.Text>\r\n            {selectedVenue.sport}\r\n          </Card.Text>\r\n          <Card.Title>Server Ip:</Card.Title>\r\n          <Card.Text>\r\n            {server !== undefined && server.ip4}\r\n          </Card.Text>\r\n      </Card.Body>\r\n    }\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default Details","import React, {useContext} from \"react\"\r\nimport {Context} from \"../../Context\"\r\n\r\nimport Table from \"react-bootstrap/Table\"\r\n\r\nfunction DataTabServers() {\r\n  const {filteredVenues} = useContext(Context)\r\n  const serversList = filteredVenues !== undefined && filteredVenues.map(venue => venue.server)\r\n  \r\n  const {selectedVenue} = useContext(Context)\r\n  const {server: currentVenueServer} = selectedVenue !== undefined && selectedVenue\r\n    \r\n  function createUniqueServersList() {\r\n    let uniqueServersList = []\r\n\r\n    serversList.forEach(server => {\r\n      let isUnique = true\r\n\r\n      while(isUnique) {\r\n        if(uniqueServersList.length === 0) {\r\n          uniqueServersList.push(server)\r\n          isUnique = false\r\n        } else {\r\n          uniqueServersList.forEach(uniqueServer => {\r\n            if(uniqueServer.id === server.id) {\r\n              isUnique = false\r\n            }\r\n          })\r\n          if(isUnique) {\r\n            uniqueServersList.push(server)\r\n            isUnique=false\r\n          }\r\n        }\r\n      }\r\n    })\r\n    return uniqueServersList\r\n  }\r\n\r\n  let finalList = createUniqueServersList()\r\n  \r\n  const rows = finalList.map(server => {\r\n    return(\r\n      <tr \r\n        key={server.id}\r\n        className={server.id === currentVenueServer.id ? \"bg-info text-white\" : null}\r\n      >\r\n        <td>{server.ip4}</td>\r\n        <td>{server.dns}</td>\r\n      </tr>\r\n    )\r\n  })\r\n\r\n  return(\r\n    <div>\r\n      <Table striped bordered hover>\r\n        <thead>\r\n          <tr>\r\n            <th>Ip4</th>\r\n            <th>Dns</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {rows}\r\n        </tbody>\r\n      </Table>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DataTabServers","import React, {useContext} from \"react\"\r\nimport {Context} from \"../Context\"\r\n\r\nfunction MatchesCounter() {\r\n  const {filteredVenues} = useContext(Context)\r\n  return <p className=\"text-center\">Matches: {filteredVenues.length}</p>\r\n}\r\n\r\nexport default MatchesCounter","import React, {useContext} from \"react\"\r\nimport {Context} from \"../../Context\"\r\n\r\nimport MatchesCounter from \"../../components/MatchesCounter\"\r\n\r\nimport Table from \"react-bootstrap/Table\"\r\n\r\nfunction DataTabSurfaces() {\r\n  const {filteredVenues, selectedVenue, handleClick} = useContext(Context)\r\n  const currentVenue = selectedVenue !== undefined && selectedVenue\r\n\r\n  const rows = filteredVenues.map(venue => {\r\n    return(\r\n      <tr \r\n        key={venue.id} \r\n        onClick={() => handleClick(venue.id)}\r\n        className={venue.id === currentVenue.id ? \"bg-info text-white\" : null}\r\n      >\r\n        <td>{venue.venueName}</td>\r\n        <td>{venue.surfaceName}</td>\r\n        <td>{venue.status}</td>\r\n        <td>{venue.sport}</td>\r\n      </tr>\r\n    )\r\n  })\r\n\r\n  return(\r\n    <div>\r\n      <Table striped bordered hover>\r\n        <thead>\r\n          <tr>\r\n            <th>Venue Name</th>\r\n            <th>Surface Name</th>\r\n            <th>Status</th>\r\n            <th>Sport</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {rows}\r\n        </tbody>\r\n      </Table>\r\n      <MatchesCounter />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DataTabSurfaces","import React from \"react\"\r\n\r\nimport SearchBar from \"../components/SearchBar\"\r\nimport Details from \"../components/Details\"\r\n\r\nimport DataTabServers from \"./DataTab/DataTabServers\"\r\nimport DataTabSurfaces from \"./DataTab/DataTabSurfaces\"\r\n\r\nimport Tabs from \"react-bootstrap/Tabs\"\r\nimport Tab from \"react-bootstrap/Tab\"\r\n\r\nimport Container from \"react-bootstrap/Container\"\r\nimport Row from \"react-bootstrap/Row\"\r\nimport Col from \"react-bootstrap/Col\"\r\n\r\nfunction DataTab() {\r\n  return(\r\n    <div>\r\n      <SearchBar />\r\n      <Container fluid>\r\n        <Row>\r\n          <Col xs={9}>\r\n            <Tabs defaultActiveKey=\"surfaces\">\r\n              <Tab eventKey=\"surfaces\" title=\"Surfaces\">\r\n                <DataTabSurfaces />\r\n              </Tab>\r\n              <Tab eventKey=\"servers\" title=\"Servers\">\r\n                <DataTabServers />\r\n              </Tab>\r\n            </Tabs>\r\n          </Col>\r\n\r\n          <Col xs={3}>\r\n            <Details />\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DataTab","import React from 'react';\nimport './App.css';\n\nimport EmptyTab from \"./pages/EmptyTab\"\nimport DataTab from \"./pages/DataTab\"\n\nimport Tab from \"react-bootstrap/Tab\"\nimport Row from \"react-bootstrap/Row\"\nimport Col from \"react-bootstrap/Col\"\nimport Nav from \"react-bootstrap/Nav\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Tab.Container defaultActiveKey=\"first\">\n        <Row>\n          <Col sm={1}>\n            <Nav variant=\"pills\" className=\"flex-column\">\n              <Nav.Item>\n                <Nav.Link eventKey=\"first\">Empty Tab</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link eventKey=\"second\">Data</Nav.Link>\n              </Nav.Item>\n            </Nav>\n          </Col>\n          <Col sm={11}>\n            <Tab.Content>\n              <Tab.Pane eventKey=\"first\">\n                <EmptyTab />\n              </Tab.Pane>\n              <Tab.Pane eventKey=\"second\">\n                <DataTab />\n              </Tab.Pane>\n            </Tab.Content>\n          </Col>\n        </Row>\n      </Tab.Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {ContextProvider} from \"./Context\"\nimport App from './App';\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <ContextProvider>\n      <App />\n    </ContextProvider>, \n    document.getElementById('root')\n);\n  \n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}